{"ast":null,"code":"var _jsxFileName = \"D:\\\\DEV-PROJECTS\\\\MS-FRONT\\\\test-app\\\\src\\\\App.js\";\nimport React from 'react';\nimport PropTypes from 'react';\nimport './App.scss';\n\nclass Leaderboard extends React.Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leaderboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leaderboard-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leaderboard-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }\n    }, \"Leaderboard\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leaderboard-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leaderboard-player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 20\n      }\n    }, \"Cristi : 60\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leaderboard-player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 20\n      }\n    }, \"Iulia : 90\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"leaderboard-player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 20\n      }\n    }, \"Ioana: 102\")))));\n  }\n\n} // Cell Class\n\n\nclass Cell extends React.Component {\n  getValue() {\n    const {\n      value\n    } = this.props;\n\n    if (!value.isRevealed) {\n      return this.props.value.isFlagged ? \"🏳️\" : null;\n    }\n\n    if (value.isMine) {\n      return \"💣\";\n    }\n\n    if (value.neighbour === 0) {\n      return null;\n    }\n\n    return value.neighbour;\n  }\n\n  render() {\n    const {\n      value,\n      onClick,\n      cMenu\n    } = this.props;\n    let className = \"cell\" + (value.isRevealed ? \"\" : \" hidden\") + (value.isMine ? \" is-mine\" : \"\") + (value.isFlagged ? \" is-flag\" : \"\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: onClick,\n      className: className,\n      onContextMenu: cMenu,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, this.getValue());\n  }\n\n} // Board Class\n\n\nclass Board extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\n      gameStatus: \"Game in progress\",\n      mineCount: this.props.mines,\n      time: 0,\n      hasStarted: false,\n      myInterval: 0\n    };\n\n    this.tick = () => {\n      if (this.state.gameStatus === \"Game in progress\") {\n        this.setState({\n          myInterval: setInterval(() => {\n            this.setState({\n              time: this.state.time + 1\n            });\n          }, 1000)\n        });\n      }\n    };\n  }\n\n  /* Helper Functions */\n  // get mines\n  getMines(data) {\n    let mineArray = [];\n    data.map(datarow => {\n      datarow.map(dataitem => {\n        if (dataitem.isMine) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n    return mineArray;\n  } // get Flags\n\n\n  getFlags(data) {\n    let mineArray = [];\n    data.map(datarow => {\n      datarow.map(dataitem => {\n        if (dataitem.isFlagged) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n    return mineArray;\n  } // get Hidden cells\n\n\n  getHidden(data) {\n    let mineArray = [];\n    data.map(datarow => {\n      datarow.map(dataitem => {\n        if (!dataitem.isRevealed) {\n          mineArray.push(dataitem);\n        }\n      });\n    });\n    return mineArray;\n  } // get random number given a dimension\n\n\n  getRandomNumber(dimension) {\n    // return Math.floor(Math.random() * dimension);\n    return Math.floor(Math.random() * 1000 + 1) % dimension;\n  } // Gets initial board data\n\n\n  initBoardData(height, width, mines) {\n    let data = this.createEmptyArray(height, width);\n    data = this.plantMines(data, height, width, mines);\n    data = this.getNeighbours(data, height, width);\n    return data;\n  }\n\n  createEmptyArray(height, width) {\n    let data = [];\n\n    for (let i = 0; i < height; i++) {\n      data.push([]);\n\n      for (let j = 0; j < width; j++) {\n        data[i][j] = {\n          x: i,\n          y: j,\n          isMine: false,\n          neighbour: 0,\n          isRevealed: false,\n          isEmpty: false,\n          isFlagged: false\n        };\n      }\n    }\n\n    return data;\n  } // plant mines on the board\n\n\n  plantMines(data, height, width, mines) {\n    let randomx,\n        randomy,\n        minesPlanted = 0;\n\n    while (minesPlanted < mines) {\n      randomx = this.getRandomNumber(width);\n      randomy = this.getRandomNumber(height);\n\n      if (!data[randomx][randomy].isMine) {\n        data[randomx][randomy].isMine = true;\n        minesPlanted++;\n      }\n    }\n\n    return data;\n  } // get number of neighbouring mines for each board cell\n\n\n  getNeighbours(data, height, width) {\n    let updatedData = data,\n        index = 0;\n\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        if (data[i][j].isMine !== true) {\n          let mine = 0;\n          const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\n          area.map(value => {\n            if (value.isMine) {\n              mine++;\n            }\n          });\n\n          if (mine === 0) {\n            updatedData[i][j].isEmpty = true;\n          }\n\n          updatedData[i][j].neighbour = mine;\n        }\n      }\n    }\n\n    return updatedData;\n  }\n\n  // looks for neighbouring cells and returns them\n  traverseBoard(x, y, data) {\n    const el = []; //up\n\n    if (x > 0) {\n      el.push(data[x - 1][y]);\n    } //down\n\n\n    if (x < this.props.height - 1) {\n      el.push(data[x + 1][y]);\n    } //left\n\n\n    if (y > 0) {\n      el.push(data[x][y - 1]);\n    } //right\n\n\n    if (y < this.props.width - 1) {\n      el.push(data[x][y + 1]);\n    } // top left\n\n\n    if (x > 0 && y > 0) {\n      el.push(data[x - 1][y - 1]);\n    } // top right\n\n\n    if (x > 0 && y < this.props.width - 1) {\n      el.push(data[x - 1][y + 1]);\n    } // bottom right\n\n\n    if (x < this.props.height - 1 && y < this.props.width - 1) {\n      el.push(data[x + 1][y + 1]);\n    } // bottom left\n\n\n    if (x < this.props.height - 1 && y > 0) {\n      el.push(data[x + 1][y - 1]);\n    }\n\n    return el;\n  } // reveals the whole board\n\n\n  revealBoard() {\n    let updatedData = this.state.boardData;\n    updatedData.map(datarow => {\n      datarow.map(dataitem => {\n        dataitem.isRevealed = true;\n      });\n    });\n    this.setState({\n      boardData: updatedData\n    });\n  }\n  /* reveal logic for empty cell */\n\n\n  revealEmpty(x, y, data) {\n    let area = this.traverseBoard(x, y, data);\n    area.map(value => {\n      if (!value.isFlagged && !value.isRevealed && (value.isEmpty || !value.isMine)) {\n        data[value.x][value.y].isRevealed = true;\n\n        if (value.isEmpty) {\n          this.revealEmpty(value.x, value.y, data);\n        }\n      }\n    });\n    return data;\n  } // Handle User Events\n\n\n  _handleCellClick(x, y) {\n    if (this.state.hasStarted === false) {\n      this.setState({\n        hasStarted: true\n      });\n      this.tick();\n    } // check if revealed. return if true.\n\n\n    if (this.state.boardData[x][y].isRevealed || this.state.boardData[x][y].isFlagged) return null; // check if mine. game over if true\n\n    if (this.state.boardData[x][y].isMine) {\n      this.setState({\n        gameStatus: \"You Lost.\"\n      });\n      this.revealBoard(); //oprim timerul \n\n      clearInterval(this.state.myInterval); //sendScoreToAPI(this.state.time);\n      //alert(\"game over\");\n    }\n\n    let updatedData = this.state.boardData;\n    updatedData[x][y].isFlagged = false;\n    updatedData[x][y].isRevealed = true;\n\n    if (updatedData[x][y].isEmpty) {\n      updatedData = this.revealEmpty(x, y, updatedData);\n    }\n\n    if (this.getHidden(updatedData).length === this.props.mines) {\n      this.setState({\n        mineCount: 0,\n        gameStatus: \"You Win.\"\n      });\n      this.revealBoard();\n      clearInterval(this.state.myInterval); //sendScoreToAPI();\n    }\n\n    this.setState({\n      boardData: updatedData,\n      mineCount: this.props.mines - this.getFlags(updatedData).length\n    });\n  }\n\n  _handleContextMenu(e, x, y) {\n    e.preventDefault();\n    let updatedData = this.state.boardData;\n    let mines = this.state.mineCount; // check if already revealed\n\n    if (updatedData[x][y].isRevealed) return;\n\n    if (updatedData[x][y].isFlagged) {\n      updatedData[x][y].isFlagged = false;\n      mines++;\n    } else {\n      updatedData[x][y].isFlagged = true;\n      mines--;\n    }\n\n    if (mines === 0) {\n      const mineArray = this.getMines(updatedData);\n      const FlagArray = this.getFlags(updatedData);\n\n      if (JSON.stringify(mineArray) === JSON.stringify(FlagArray)) {\n        this.setState({\n          mineCount: 0,\n          gameStatus: \"You Win.\"\n        });\n        this.revealBoard(); //alert(\"You Win\");\n\n        clearInterval(this.state.interval);\n        sendScoreToAPI();\n      }\n    }\n\n    this.setState({\n      boardData: updatedData,\n      mineCount: mines\n    });\n  }\n\n  renderBoard(data) {\n    return data.map(datarow => {\n      return datarow.map(dataitem => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: dataitem.x * datarow.length + dataitem.y,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Cell, {\n          onClick: () => this._handleCellClick(dataitem.x, dataitem.y),\n          cMenu: e => this._handleContextMenu(e, dataitem.x, dataitem.y),\n          value: dataitem,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 25\n          }\n        }), datarow[datarow.length - 1] === dataitem ? /*#__PURE__*/React.createElement(\"div\", {\n          className: \"clear\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 71\n          }\n        }) : \"\");\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 21\n      }\n    }, this.state.gameStatus), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 21\n      }\n    }, \"Mines remaining: \", this.state.mineCount), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }\n    }, \"TIMER: \", this.state.time)), this.renderBoard(this.state.boardData), /*#__PURE__*/React.createElement(Leaderboard, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 21\n      }\n    }));\n  }\n\n} // Game Class\n\n\nclass Game extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      height: 8,\n      width: 8,\n      mines: 8\n    };\n  }\n\n  render() {\n    const {\n      height,\n      width,\n      mines\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Board, {\n      height: height,\n      width: width,\n      mines: mines,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nCell.propTypes = {\n  value: PropTypes.func\n};\n\nvar sendScoreToAPI = time => {\n  //get player name from browser prompt\n  var playerName = prompt(\"Congrats for winning the game! Please enter your name: \", \"yourUsername\");\n\n  if (playerName != null) {\n    var dataToSave = {\n      time: time,\n      //replace 10 with your actual variable (probably this.state.gameScore or this.state.time)\n      name: playerName // currentTime: new Date()\n\n    }; // Actual API call\n\n    fetch(\"http://localhost:1601/api/ms\", // replace with the url to your API\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(dataToSave)\n    }).then(res => res.json()).then(result => {\n      alert('You saved your score');\n    }, // Note: it's important to handle errors here\n    error => {\n      alert('Bad API call');\n      console.log(error);\n    });\n  }\n};\n/*async function postData(url = '', data = {}) {\n // Default options are marked with *\n const response = await fetch(url, {\n   method: 'POST', // *GET, POST, PUT, DELETE, etc.\n   mode: 'no-cors', // no-cors, *cors, same-origin\n   //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n   //credentials: 'same-origin', // include, *same-origin, omit\n   headers: {\n     'Accept': 'application/json, text/plain',\n     'Content-Type': 'application/json;charset=UTF-8'\n     },\n   // redirect: 'follow', // manual, *follow, error\n  // referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n   body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n });\n return response.json(); // parses JSON response into native JavaScript objects\n}\n      postData('https://localhost:44368/api/ms', { name:\"test\",time:1000 })\n .then(data => {\n   console.log(data); // JSON data parsed by `response.json()` call\n });*/\n\n\nexport default Game;","map":{"version":3,"sources":["D:/DEV-PROJECTS/MS-FRONT/test-app/src/App.js"],"names":["React","PropTypes","Leaderboard","Component","render","Cell","getValue","value","props","isRevealed","isFlagged","isMine","neighbour","onClick","cMenu","className","Board","state","boardData","initBoardData","height","width","mines","gameStatus","mineCount","time","hasStarted","myInterval","tick","setState","setInterval","getMines","data","mineArray","map","datarow","dataitem","push","getFlags","getHidden","getRandomNumber","dimension","Math","floor","random","createEmptyArray","plantMines","getNeighbours","i","j","x","y","isEmpty","randomx","randomy","minesPlanted","updatedData","index","mine","area","traverseBoard","el","revealBoard","revealEmpty","_handleCellClick","clearInterval","length","_handleContextMenu","e","preventDefault","FlagArray","JSON","stringify","interval","sendScoreToAPI","renderBoard","Game","propTypes","func","playerName","prompt","dataToSave","name","fetch","method","headers","body","then","res","json","result","alert","error","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'react'\n\nimport './App.scss';\n\n\nclass Leaderboard extends React.Component{\n    \n    render(){\n       return( <div className=\"leaderboard\">\n           <div className=\"leaderboard-container\">\n            <div className=\"leaderboard-title\">\n                <span>Leaderboard</span>\n            </div>\n            <div className=\"leaderboard-content\">\n                <div className=\"leaderboard-player\">\n                   <span>Cristi : 60</span>\n                  \n                </div>\n                <div className=\"leaderboard-player\">\n                   <span>Iulia : 90</span>\n                   \n                </div>\n                <div className=\"leaderboard-player\">\n                   <span>Ioana: 102</span>\n                   \n                </div>\n            </div>\n            </div>\n        </div>\n       )}\n}\n\n// Cell Class\nclass Cell extends React.Component {\n  getValue() {\n    const {value} = this.props;\n    \n    if (!value.isRevealed) {\n      return this.props.value.isFlagged ? \"🏳️\" : null;\n    }\n    if (value.isMine) {\n      return \"💣\";\n    }\n    if (value.neighbour === 0) {\n      return null;\n    }\n    return value.neighbour;\n  }\n\n  render() {\n    const {value, onClick, cMenu} = this.props;\n    let className =\n      \"cell\" +\n      (value.isRevealed ? \"\" : \" hidden\") +\n      (value.isMine ? \" is-mine\" : \"\") +\n      (value.isFlagged ? \" is-flag\" : \"\");\n\n    return (\n      <div\n        onClick={onClick}\n        className={className}\n        onContextMenu={cMenu}\n      >\n        {this.getValue()}\n      </div>\n    );\n  }\n}\n\n// Board Class\nclass Board extends React.Component {\n  state = {\n        boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\n        gameStatus: \"Game in progress\",\n        mineCount: this.props.mines,\n        time: 0,\n        hasStarted:false,\n        myInterval:0,\n    };\n\n    tick=()=>{\n      if (this.state.gameStatus===\"Game in progress\"){\n      \n\n      this.setState({myInterval:setInterval(()=>{\n        this.setState({\n          time:this.state.time+1\n        })\n      },1000)})\n     \n\n\n\n    }\n    }\n\n\n\n    \n\n    /* Helper Functions */\n\n    // get mines\n    getMines(data) {\n        let mineArray = [];\n\n        data.map(datarow => {\n            datarow.map((dataitem) => {\n                if (dataitem.isMine) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get Flags\n    getFlags(data) {\n        let mineArray = [];\n\n        data.map(datarow => {\n            datarow.map((dataitem) => {\n                if (dataitem.isFlagged) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get Hidden cells\n    getHidden(data) {\n        let mineArray = [];\n\n        data.map(datarow => {\n            datarow.map((dataitem) => {\n                if (!dataitem.isRevealed) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get random number given a dimension\n    getRandomNumber(dimension) {\n        // return Math.floor(Math.random() * dimension);\n        return Math.floor((Math.random() * 1000) + 1) % dimension;\n    }\n\n    // Gets initial board data\n    initBoardData(height, width, mines) {\n        let data = this.createEmptyArray(height, width);\n        data = this.plantMines(data, height, width, mines);\n        data = this.getNeighbours(data, height, width);\n        return data;\n    }\n    createEmptyArray(height, width) {\n        let data = [];\n\n        for (let i = 0; i < height; i++) {\n            data.push([]);\n            for (let j = 0; j < width; j++) {\n                data[i][j] = {\n                    x: i,\n                    y: j,\n                    isMine: false,\n                    neighbour: 0,\n                    isRevealed: false,\n                    isEmpty: false,\n                    isFlagged: false,\n                };\n            }\n        }\n        return data;\n    }\n\n    // plant mines on the board\n    plantMines(data, height, width, mines) {\n        let randomx, randomy, minesPlanted = 0;\n\n        while (minesPlanted < mines) {\n            randomx = this.getRandomNumber(width);\n            randomy = this.getRandomNumber(height);\n            if (!(data[randomx][randomy].isMine)) {\n                data[randomx][randomy].isMine = true;\n                minesPlanted++;\n            }\n        }\n\n        return (data);\n    }\n\n    // get number of neighbouring mines for each board cell\n    getNeighbours(data, height, width) {\n        let updatedData = data, index = 0;\n\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                if (data[i][j].isMine !== true) {\n                    let mine = 0;\n                    const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\n                    area.map(value => {\n                        if (value.isMine) {\n                            mine++;\n                        }\n                    });\n                    if (mine === 0) {\n                        updatedData[i][j].isEmpty = true;\n                    }\n                    updatedData[i][j].neighbour = mine;\n                }\n            }\n        }\n\n        return (updatedData);\n    };\n\n    // looks for neighbouring cells and returns them\n    traverseBoard(x, y, data) {\n        const el = [];\n\n        //up\n        if (x > 0) {\n            el.push(data[x - 1][y]);\n        }\n\n        //down\n        if (x < this.props.height - 1) {\n            el.push(data[x + 1][y]);\n        }\n\n        //left\n        if (y > 0) {\n            el.push(data[x][y - 1]);\n        }\n\n        //right\n        if (y < this.props.width - 1) {\n            el.push(data[x][y + 1]);\n        }\n\n        // top left\n        if (x > 0 && y > 0) {\n            el.push(data[x - 1][y - 1]);\n        }\n\n        // top right\n        if (x > 0 && y < this.props.width - 1) {\n            el.push(data[x - 1][y + 1]);\n        }\n\n        // bottom right\n        if (x < this.props.height - 1 && y < this.props.width - 1) {\n            el.push(data[x + 1][y + 1]);\n        }\n\n        // bottom left\n        if (x < this.props.height - 1 && y > 0) {\n            el.push(data[x + 1][y - 1]);\n        }\n\n        return el;\n    }\n\n    // reveals the whole board\n    revealBoard() {\n        let updatedData = this.state.boardData;\n        updatedData.map((datarow) => {\n            datarow.map((dataitem) => {\n                dataitem.isRevealed = true;\n            });\n        });\n        this.setState({\n            boardData: updatedData\n        })\n    }\n\n    /* reveal logic for empty cell */\n    revealEmpty(x, y, data) {\n        let area = this.traverseBoard(x, y, data);\n        area.map(value => {\n            if (!value.isFlagged && !value.isRevealed && (value.isEmpty || !value.isMine)) {\n                data[value.x][value.y].isRevealed = true;\n                if (value.isEmpty) {\n                    this.revealEmpty(value.x, value.y, data);\n                }\n            }\n        });\n        return data;\n\n    }\n\n    // Handle User Events\n\n    _handleCellClick(x, y) {\n\n        if(this.state.hasStarted===false)\n        {\n            this.setState({hasStarted:true})\n            this.tick()\n        }\n        // check if revealed. return if true.\n        if (this.state.boardData[x][y].isRevealed || this.state.boardData[x][y].isFlagged)\n        \n        return null;\n            \n        // check if mine. game over if true\n        if (this.state.boardData[x][y].isMine) {\n            this.setState({gameStatus: \"You Lost.\"});\n            this.revealBoard();\n            //oprim timerul \n            clearInterval(this.state.myInterval)\n            \n            //sendScoreToAPI(this.state.time);\n            \n            //alert(\"game over\");\n        }\n\n        let updatedData = this.state.boardData;\n        updatedData[x][y].isFlagged = false;\n        updatedData[x][y].isRevealed = true;\n\n        if (updatedData[x][y].isEmpty) {\n         \n            \n            updatedData = this.revealEmpty(x, y, updatedData);\n        }\n\n        if (this.getHidden(updatedData).length === this.props.mines) {\n            this.setState({mineCount: 0, gameStatus: \"You Win.\"});\n            this.revealBoard();\n            \n                \n                \n            clearInterval(this.state.myInterval)\n            \n          \n            //sendScoreToAPI();\n        }\n\n        this.setState({\n            boardData: updatedData,\n            mineCount: this.props.mines - this.getFlags(updatedData).length,\n        });\n    }\n\n    _handleContextMenu(e, x, y) {\n        e.preventDefault();\n        let updatedData = this.state.boardData;\n        let mines = this.state.mineCount;\n\n        // check if already revealed\n        if (updatedData[x][y].isRevealed) return;\n\n        if (updatedData[x][y].isFlagged) {\n            updatedData[x][y].isFlagged = false;\n            mines++;\n        } else {\n            updatedData[x][y].isFlagged = true;\n            mines--;\n        }\n\n        if (mines === 0) {\n            const mineArray = this.getMines(updatedData);\n            const FlagArray = this.getFlags(updatedData);\n            if (JSON.stringify(mineArray) === JSON.stringify(FlagArray)) {\n                this.setState({mineCount: 0, gameStatus: \"You Win.\"});\n                this.revealBoard();\n                //alert(\"You Win\");\n                clearInterval(this.state.interval);\n                sendScoreToAPI();\n            }\n        }\n\n        this.setState({\n            boardData: updatedData,\n            mineCount: mines,\n        });\n    }\n\n    renderBoard(data) {\n        return data.map((datarow) => {\n            return datarow.map((dataitem) => {\n                return (\n                    <div key={dataitem.x * datarow.length + dataitem.y}>\n                        <Cell\n                            onClick={() => this._handleCellClick(dataitem.x, dataitem.y) } \n                            cMenu={(e) => this._handleContextMenu(e, dataitem.x, dataitem.y)}\n                            value={dataitem}\n                        />\n                        {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\n                    </div>);\n            })\n        });\n\n    }\n\n   \n\n\n\n  render() {\n        return (\n            <div className=\"board\">\n                <div className=\"game-info\">\n                    <h1 className=\"info\">{this.state.gameStatus}</h1>\n                    <span className=\"info\">Mines remaining: {this.state.mineCount}</span>\n        <span className=\"info\">TIMER: {this.state.time}</span>\n                </div>\n                {\n                    this.renderBoard(this.state.boardData)\n                }\n                  \n                    <Leaderboard/>\n                \n               \n               \n                \n            </div>\n\n            \n        );\n    }\n}\n\n// Game Class\nclass Game extends React.Component {\n  state = {\n    height: 8,\n    width: 8,\n    mines: 8,\n    \n  };\n\n  render() {\n    const { height, width, mines } = this.state;\n    \n    return (\n      <div className=\"game\">\n        <Board height={height} width={width} mines={mines} />\n      </div>\n    );\n  }\n}\n\nCell.propTypes = {\n  value: PropTypes.func\n}\n\n\nvar sendScoreToAPI = (time) => {\n    //get player name from browser prompt\n    var playerName = prompt(\"Congrats for winning the game! Please enter your name: \", \"yourUsername\");\n    if (playerName != null) {\n      var dataToSave = {\n        time: time, //replace 10 with your actual variable (probably this.state.gameScore or this.state.time)\n        name: playerName,\n       // currentTime: new Date()\n      };\n      // Actual API call\n      fetch(\n        \"http://localhost:1601/api/ms\", // replace with the url to your API\n        {\n          method: 'POST', \n          headers: {\n             'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(dataToSave)\n        }\n        )\n        .then(res => res.json())\n        .then(\n          (result) => {\n            alert('You saved your score');\n          },\n          // Note: it's important to handle errors here\n          (error) => {\n            alert('Bad API call');\n            console.log(error);\n          }\n        )\n    }\n  }\n        \n       /*async function postData(url = '', data = {}) {\n        // Default options are marked with *\n        const response = await fetch(url, {\n          method: 'POST', // *GET, POST, PUT, DELETE, etc.\n          mode: 'no-cors', // no-cors, *cors, same-origin\n          //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n          //credentials: 'same-origin', // include, *same-origin, omit\n          headers: {\n            'Accept': 'application/json, text/plain',\n            'Content-Type': 'application/json;charset=UTF-8'\n            },\n\n         // redirect: 'follow', // manual, *follow, error\n         // referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n          body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        });\n        return response.json(); // parses JSON response into native JavaScript objects\n      }\n      \n      postData('https://localhost:44368/api/ms', { name:\"test\",time:1000 })\n        .then(data => {\n          console.log(data); // JSON data parsed by `response.json()` call\n        });*/\n\n\n\n\n    \n\n  \n\n\n\n\n  export default Game\n"]},"metadata":{},"sourceType":"module"}