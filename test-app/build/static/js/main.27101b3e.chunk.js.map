{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Leaderboard","className","React","Component","Cell","value","this","props","isRevealed","isMine","neighbour","isFlagged","onClick","cMenu","onContextMenu","getValue","Board","state","boardData","initBoardData","height","width","mines","gameStatus","mineCount","time","hasStarted","myInterval","tick","setState","setInterval","data","mineArray","map","datarow","dataitem","push","dimension","Math","floor","random","createEmptyArray","plantMines","getNeighbours","i","j","x","y","isEmpty","randomx","randomy","minesPlanted","getRandomNumber","updatedData","mine","traverseBoard","el","revealEmpty","revealBoard","clearInterval","getHidden","length","getFlags","e","preventDefault","getMines","FlagArray","JSON","stringify","interval","sendScoreToAPI","key","_handleCellClick","_handleContextMenu","renderBoard","Game","playerName","prompt","dataToSave","name","fetch","method","headers","body","then","res","json","result","alert","error","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.27101b3e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'react'\n\nimport './App.scss';\n\n\nclass Leaderboard extends React.Component{\n    \n    render(){\n       return( <div className=\"leaderboard\">\n           <div className=\"leaderboard-container\">\n            <div className=\"leaderboard-title\">\n                <span>Leaderboard</span>\n            </div>\n            <div className=\"leaderboard-content\">\n                <div className=\"leaderboard-player\">\n                   <span>Cristi : 60</span>\n                  \n                </div>\n                <div className=\"leaderboard-player\">\n                   <span>Iulia : 90</span>\n                   \n                </div>\n                <div className=\"leaderboard-player\">\n                   <span>Ioana: 102</span>\n                   \n                </div>\n            </div>\n            </div>\n        </div>\n       )}\n}\n\n// Cell Class\nclass Cell extends React.Component {\n  getValue() {\n    const {value} = this.props;\n    \n    if (!value.isRevealed) {\n      return this.props.value.isFlagged ? \"üè≥Ô∏è\" : null;\n    }\n    if (value.isMine) {\n      return \"üí£\";\n    }\n    if (value.neighbour === 0) {\n      return null;\n    }\n    return value.neighbour;\n  }\n\n  render() {\n    const {value, onClick, cMenu} = this.props;\n    let className =\n      \"cell\" +\n      (value.isRevealed ? \"\" : \" hidden\") +\n      (value.isMine ? \" is-mine\" : \"\") +\n      (value.isFlagged ? \" is-flag\" : \"\");\n\n    return (\n      <div\n        onClick={onClick}\n        className={className}\n        onContextMenu={cMenu}\n      >\n        {this.getValue()}\n      </div>\n    );\n  }\n}\n\n// Board Class\nclass Board extends React.Component {\n  state = {\n        boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\n        gameStatus: \"Game in progress\",\n        mineCount: this.props.mines,\n        time: 0,\n        hasStarted:false,\n        myInterval:0,\n    };\n\n    tick=()=>{\n      if (this.state.gameStatus===\"Game in progress\"){\n      \n\n      this.setState({myInterval:setInterval(()=>{\n        this.setState({\n          time:this.state.time+1\n        })\n      },1000)})\n     \n\n\n\n    }\n    }\n\n\n\n    \n\n    /* Helper Functions */\n\n    // get mines\n    getMines(data) {\n        let mineArray = [];\n\n        data.map(datarow => {\n            datarow.map((dataitem) => {\n                if (dataitem.isMine) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get Flags\n    getFlags(data) {\n        let mineArray = [];\n\n        data.map(datarow => {\n            datarow.map((dataitem) => {\n                if (dataitem.isFlagged) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get Hidden cells\n    getHidden(data) {\n        let mineArray = [];\n\n        data.map(datarow => {\n            datarow.map((dataitem) => {\n                if (!dataitem.isRevealed) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get random number given a dimension\n    getRandomNumber(dimension) {\n        // return Math.floor(Math.random() * dimension);\n        return Math.floor((Math.random() * 1000) + 1) % dimension;\n    }\n\n    // Gets initial board data\n    initBoardData(height, width, mines) {\n        let data = this.createEmptyArray(height, width);\n        data = this.plantMines(data, height, width, mines);\n        data = this.getNeighbours(data, height, width);\n        return data;\n    }\n    createEmptyArray(height, width) {\n        let data = [];\n\n        for (let i = 0; i < height; i++) {\n            data.push([]);\n            for (let j = 0; j < width; j++) {\n                data[i][j] = {\n                    x: i,\n                    y: j,\n                    isMine: false,\n                    neighbour: 0,\n                    isRevealed: false,\n                    isEmpty: false,\n                    isFlagged: false,\n                };\n            }\n        }\n        return data;\n    }\n\n    // plant mines on the board\n    plantMines(data, height, width, mines) {\n        let randomx, randomy, minesPlanted = 0;\n\n        while (minesPlanted < mines) {\n            randomx = this.getRandomNumber(width);\n            randomy = this.getRandomNumber(height);\n            if (!(data[randomx][randomy].isMine)) {\n                data[randomx][randomy].isMine = true;\n                minesPlanted++;\n            }\n        }\n\n        return (data);\n    }\n\n    // get number of neighbouring mines for each board cell\n    getNeighbours(data, height, width) {\n        let updatedData = data, index = 0;\n\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                if (data[i][j].isMine !== true) {\n                    let mine = 0;\n                    const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\n                    area.map(value => {\n                        if (value.isMine) {\n                            mine++;\n                        }\n                    });\n                    if (mine === 0) {\n                        updatedData[i][j].isEmpty = true;\n                    }\n                    updatedData[i][j].neighbour = mine;\n                }\n            }\n        }\n\n        return (updatedData);\n    };\n\n    // looks for neighbouring cells and returns them\n    traverseBoard(x, y, data) {\n        const el = [];\n\n        //up\n        if (x > 0) {\n            el.push(data[x - 1][y]);\n        }\n\n        //down\n        if (x < this.props.height - 1) {\n            el.push(data[x + 1][y]);\n        }\n\n        //left\n        if (y > 0) {\n            el.push(data[x][y - 1]);\n        }\n\n        //right\n        if (y < this.props.width - 1) {\n            el.push(data[x][y + 1]);\n        }\n\n        // top left\n        if (x > 0 && y > 0) {\n            el.push(data[x - 1][y - 1]);\n        }\n\n        // top right\n        if (x > 0 && y < this.props.width - 1) {\n            el.push(data[x - 1][y + 1]);\n        }\n\n        // bottom right\n        if (x < this.props.height - 1 && y < this.props.width - 1) {\n            el.push(data[x + 1][y + 1]);\n        }\n\n        // bottom left\n        if (x < this.props.height - 1 && y > 0) {\n            el.push(data[x + 1][y - 1]);\n        }\n\n        return el;\n    }\n\n    // reveals the whole board\n    revealBoard() {\n        let updatedData = this.state.boardData;\n        updatedData.map((datarow) => {\n            datarow.map((dataitem) => {\n                dataitem.isRevealed = true;\n            });\n        });\n        this.setState({\n            boardData: updatedData\n        })\n    }\n\n    /* reveal logic for empty cell */\n    revealEmpty(x, y, data) {\n        let area = this.traverseBoard(x, y, data);\n        area.map(value => {\n            if (!value.isFlagged && !value.isRevealed && (value.isEmpty || !value.isMine)) {\n                data[value.x][value.y].isRevealed = true;\n                if (value.isEmpty) {\n                    this.revealEmpty(value.x, value.y, data);\n                }\n            }\n        });\n        return data;\n\n    }\n\n    // Handle User Events\n\n    _handleCellClick(x, y) {\n\n        if(this.state.hasStarted===false)\n        {\n            this.setState({hasStarted:true})\n            this.tick()\n        }\n        // check if revealed. return if true.\n        if (this.state.boardData[x][y].isRevealed || this.state.boardData[x][y].isFlagged)\n        \n        return null;\n            \n        // check if mine. game over if true\n        if (this.state.boardData[x][y].isMine) {\n            this.setState({gameStatus: \"You Lost.\"});\n            this.revealBoard();\n            //oprim timerul \n            clearInterval(this.state.myInterval)\n            \n            //sendScoreToAPI(this.state.time);\n            \n            //alert(\"game over\");\n        }\n\n        let updatedData = this.state.boardData;\n        updatedData[x][y].isFlagged = false;\n        updatedData[x][y].isRevealed = true;\n\n        if (updatedData[x][y].isEmpty) {\n         \n            \n            updatedData = this.revealEmpty(x, y, updatedData);\n        }\n\n        if (this.getHidden(updatedData).length === this.props.mines) {\n            this.setState({mineCount: 0, gameStatus: \"You Win.\"});\n            this.revealBoard();\n            \n                \n                \n            clearInterval(this.state.myInterval)\n            \n          \n            //sendScoreToAPI();\n        }\n\n        this.setState({\n            boardData: updatedData,\n            mineCount: this.props.mines - this.getFlags(updatedData).length,\n        });\n    }\n\n    _handleContextMenu(e, x, y) {\n        e.preventDefault();\n        let updatedData = this.state.boardData;\n        let mines = this.state.mineCount;\n\n        // check if already revealed\n        if (updatedData[x][y].isRevealed) return;\n\n        if (updatedData[x][y].isFlagged) {\n            updatedData[x][y].isFlagged = false;\n            mines++;\n        } else {\n            updatedData[x][y].isFlagged = true;\n            mines--;\n        }\n\n        if (mines === 0) {\n            const mineArray = this.getMines(updatedData);\n            const FlagArray = this.getFlags(updatedData);\n            if (JSON.stringify(mineArray) === JSON.stringify(FlagArray)) {\n                this.setState({mineCount: 0, gameStatus: \"You Win.\"});\n                this.revealBoard();\n                //alert(\"You Win\");\n                clearInterval(this.state.interval);\n                sendScoreToAPI();\n            }\n        }\n\n        this.setState({\n            boardData: updatedData,\n            mineCount: mines,\n        });\n    }\n\n    renderBoard(data) {\n        return data.map((datarow) => {\n            return datarow.map((dataitem) => {\n                return (\n                    <div key={dataitem.x * datarow.length + dataitem.y}>\n                        <Cell\n                            onClick={() => this._handleCellClick(dataitem.x, dataitem.y) } \n                            cMenu={(e) => this._handleContextMenu(e, dataitem.x, dataitem.y)}\n                            value={dataitem}\n                        />\n                        {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\n                    </div>);\n            })\n        });\n\n    }\n\n   \n\n\n\n  render() {\n        return (\n            <div className=\"board\">\n                <div className=\"game-info\">\n                    <h1 className=\"info\">{this.state.gameStatus}</h1>\n                    <span className=\"info\">Mines remaining: {this.state.mineCount}</span>\n        <span className=\"info\">TIMER: {this.state.time}</span>\n                </div>\n                {\n                    this.renderBoard(this.state.boardData)\n                }\n                  \n                    <Leaderboard/>\n                \n               \n               \n                \n            </div>\n\n            \n        );\n    }\n}\n\n// Game Class\nclass Game extends React.Component {\n  state = {\n    height: 6,\n    width: 6,\n    mines: 6,\n    \n  };\n\n  render() {\n    const { height, width, mines } = this.state;\n    \n    return (\n      <div className=\"game\">\n        <Board height={height} width={width} mines={mines} />\n      </div>\n    );\n  }\n}\n\nCell.propTypes = {\n  value: PropTypes.func\n}\n\n\nvar sendScoreToAPI = (time) => {\n    //get player name from browser prompt\n    var playerName = prompt(\"Congrats for winning the game! Please enter your name: \", \"yourUsername\");\n    if (playerName != null) {\n      var dataToSave = {\n        time: time, //replace 10 with your actual variable (probably this.state.gameScore or this.state.time)\n        name: playerName,\n       // currentTime: new Date()\n      };\n      // Actual API call\n      fetch(\n        \"http://localhost:1601/api/ms\", // replace with the url to your API\n        {\n          method: 'POST', \n          headers: {\n             'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(dataToSave)\n        }\n        )\n        .then(res => res.json())\n        .then(\n          (result) => {\n            alert('You saved your score');\n          },\n          // Note: it's important to handle errors here\n          (error) => {\n            alert('Bad API call');\n            console.log(error);\n          }\n        )\n    }\n  }\n        \n       /*async function postData(url = '', data = {}) {\n        // Default options are marked with *\n        const response = await fetch(url, {\n          method: 'POST', // *GET, POST, PUT, DELETE, etc.\n          mode: 'no-cors', // no-cors, *cors, same-origin\n          //cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n          //credentials: 'same-origin', // include, *same-origin, omit\n          headers: {\n            'Accept': 'application/json, text/plain',\n            'Content-Type': 'application/json;charset=UTF-8'\n            },\n\n         // redirect: 'follow', // manual, *follow, error\n         // referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n          body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        });\n        return response.json(); // parses JSON response into native JavaScript objects\n      }\n      \n      postData('https://localhost:44368/api/ms', { name:\"test\",time:1000 })\n        .then(data => {\n          console.log(data); // JSON data parsed by `response.json()` call\n        });*/\n\n\n\n\n    \n\n  \n\n\n\n\n  export default Game\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n <Game/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}